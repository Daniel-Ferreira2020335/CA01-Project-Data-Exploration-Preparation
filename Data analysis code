#CCT College Dublin
#CA01 Project
#Daniel Ferreira 2020335
#Eric Mabe 2020366

# importing all required libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler, StandardScaler, RobustScaler
from sklearn.decomposition import PCA

# loading the dataset
file_path = 'dublinbike-historical-data-2022-03.csv'
df = pd.read_csv(file_path)

# showing the first few rows of the dataset
print(df.head())
# a) Identifying categorical,discrete and continuous variable types, missing values and visualizing them
# identifying variable types
print("\nVARIABLE TYPES:")
print(df.info())
categorical_vars = ['STATUS']
discrete_vars = ['STATION_ID']
continuous_vars = ['BIKE_STANDS', 'AVAILABLE_BIKE_STANDS', 'AVAILABLE_BIKES', 'LATITUDE', 'LONGITUDE']

# checking for missing values in the dataset
print("\nMISSING VALUES:")
print(df.isnull().sum())

# visualizing the Categorial variables pie chart
print("\nVISUALIZING CATEGORICAL VARIABLES:")
status_counts = df[categorical_vars].value_counts()
plt.pie(status_counts, labels=status_counts.index, autopct='%1.1f%%', startangle=45)
plt.axis('equal')
plt.title('Distribution of STATUS')
plt.show()
# discrete variable visualization
print("\nVISUALIZING DESCRETE VARIABLES:")
plt.figure(figsize=(20, 10))
sns.countplot(x='STATION ID', data=df)
plt.xticks(rotation=90)
plt.title('Distribution of STATION ID')
plt.show()

# continuous variable visualizations
print("\nVISUALIZING CONTINUOUS VARIABLES:")
plt.figure(figsize=(16, 10))

# boxplot for BIKE_STANDS
plt.subplot(2, 3, 1)
sns.boxplot(y='BIKE_STANDS', data=df)
plt.title('Boxplot of BIKE_STANDS')

# boxplot for AVAILABLE_BIKE_STANDS
plt.subplot(2, 3, 2)
sns.boxplot(y='AVAILABLE_BIKE_STANDS', data=df)
plt.title('Boxplot of AVAILABLE_BIKE_STANDS')

# boxplot for AVAILABLE_BIKES
plt.subplot(2, 3, 3)
sns.boxplot(y='AVAILABLE_BIKES', data=df)
plt.title('Boxplot of AVAILABLE_BIKES')
# scatter plot for LATITUDE and LONGITUDE
plt.subplot(2, 3, 4)
sns.scatterplot(x='LATITUDE', y='LONGITUDE', data=df)
plt.title('Scatter plot of LATITUDE vs LONGITUDE')

# distribution plot for LATITUDE
plt.subplot(2, 3, 5)
sns.histplot(df['LATITUDE'], bins=20, kde=True)
plt.title('Distribution of LATITUDE')

plt.tight_layout()
plt.show()

# b) calculating statistical parameters
statistical_summary = df.describe()
print(statistical_summary)


# c) Normalization, Standardization, and Robust Scaling
numerical_columns = df.select_dtypes(include=['int64', 'float64']).columns
min_max_scaler = MinMaxScaler()
z_score_scaler = StandardScaler()
robust_scaler = RobustScaler()

# Applying transformations and concatenating all columns at once
df_minmax = pd.DataFrame(min_max_scaler.fit_transform(df[numerical_columns]), columns=numerical_columns + '_minmax')
df_zscore = pd.DataFrame(z_score_scaler.fit_transform(df[numerical_columns]), columns=numerical_columns + '_zscore')
df_robust = pd.DataFrame(robust_scaler.fit_transform(df[numerical_columns]), columns=numerical_columns + '_robust')

# Concatenate the new DataFrames
df = pd.concat([df, df_minmax, df_zscore, df_robust], axis=1)

# Print statements for each scaler
print("Min-Max Normalization:")
print(df[numerical_columns + '_minmax'])

print("\nZ-score Standardization:")
print(df[numerical_columns + '_zscore'])

print("\nRobust Scaling:")
print(df[numerical_columns + '_robust'])

# d) Visualizing correlation with Line, Scatter, and Heatmap
plt.figure(figsize=(12, 6))

# line plot for correlation between BIKE_STANDS and AVAILABLE_BIKES
plt.subplot(1, 3, 1)
sns.lineplot(x='BIKE_STANDS', y='AVAILABLE_BIKES', data=df)
plt.title('Line Plot \nBIKE_STANDS against AVAILABLE_BIKES')

# scatter plot for LATITUDE and LONGITUDE
plt.subplot(1, 3, 2)
sns.scatterplot(x='LATITUDE', y='LONGITUDE', data=df)
plt.title('Scatter Plot \nLATITUDE against LONGITUDE')
plt.tight_layout()

# heatmap for the correlation matrix
plt.figure(figsize=(20, 10))
correlation_matrix = df.corr(numeric_only=True)
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap')
plt.show()

# e) Graphics and descriptive understanding with EDA
# subgroups of features for exploration
# exploring the distribution of STATUS within each BIKE_STANDS subgroup
plt.figure(figsize=(12, 6))
sns.boxplot(x='STATUS', y='BIKE_STANDS', data=df)
plt.title('Distribution of BIKE_STANDS across STATUS')
plt.show()

# exploring the relationship between AVAILABLE_BIKES and AVAILABLE_BIKE_STANDS with STATUS as hue
plt.figure(figsize=(12, 6))
sns.scatterplot(x='AVAILABLE_BIKE_STANDS', y='AVAILABLE_BIKES', hue='STATUS', data=df)
plt.title('Relationship between AVAILABLE_BIKES and AVAILABLE_BIKE_STANDS with STATUS')
plt.show()

# exploring the distribution of AVAILABLE_BIKES across different STATUS categories
plt.figure(figsize=(12, 6))
sns.boxplot(x='STATUS', y='AVAILABLE_BIKES', data=df)
plt.title('Distribution of AVAILABLE_BIKES across STATUS')
plt.show()

# exploring the correlation between LATITUDE, LONGITUDE with BIKE_STANDS as size
plt.figure(figsize=(12, 6))
sns.scatterplot(x='LATITUDE', y='LONGITUDE', size='BIKE_STANDS', data=df)
plt.title('Correlation between LATITUDE, LONGITUDE with BIKE_STANDS as size')
plt.show()

# exploring the count of each STATUS category
plt.figure(figsize=(8, 6))
sns.countplot(x='STATUS', data=df)
plt.title('Count of each STATUS category')
plt.show()


